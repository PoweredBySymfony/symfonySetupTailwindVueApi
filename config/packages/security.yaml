security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  role_hierarchy:
    ROLE_BASE: ROLE_USER
    ROLE_ADMIN: ROLE_BASE
    ROLE_ORGANIZER: ROLE_BASE
    ROLE_ARTIST: ROLE_BASE
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        #Entité représentant nos utilisateurs
        class: App\Entity\User
        #La propriété avec laquelle l'utilisateur s'identifie
        property: login
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      entry_point: jwt
      refresh_jwt:
        check_path: api_refresh_token
      lazy: true
      #L'application est sans état (pas de session)
      stateless: true
      #Le nom du provider que nous avons configuré plus tôt
      provider: app_user_provider
      json_login:
        #Le nom de la route d'authentification
        check_path: /api/auth
        #La propriété correspondant au login dans notre entité
        username_path: login
        #La propriété correspondant au mot de passe (haché) dans notre entité
        password_path: password
        #Les services qui gèrent le succès ou l'échec d'authentification
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
      jwt: ~
      logout:
        path: api_token_invalidate
        delete_cookies: [ 'BEARER' ]


  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
#    - { path: ^/api/auth, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - {path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY}
#    - {path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY}
#    - {path: ^/api/users, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: POST}
#    - { path: ^/api/, roles: ROLE_USER }

    # - { path: ^/profile, roles: ROLE_USER }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
